import openai
from flask import Flask, request
from dotenv import load_dotenv
from collections import defaultdict, deque

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
APP_URL = os.getenv("APP_URL")
openai.api_key = os.getenv("OPENAI_API_KEY")
from collections import defaultdict, deque
memory = defaultdict(lambda: [])

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ chat_id
user_histories = defaultdict(lambda: deque(maxlen=5))


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ===
bot = telebot.TeleBot(TOKEN)
babka_active = True  # –ë–∞–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ADMIN_ID = 1034982624  # –¢–≤–æ–π Telegram ID

babka_active = True
ADMIN_ID = 1034982624
app = Flask(__name__)

# === –ü–∞–º—è—Ç—å –±–∞–±–∫–∏ (–¥–æ 5 —Ä–µ–ø–ª–∏–∫ –Ω–∞ —á–∞—Ç)
memory = defaultdict(lambda: deque(maxlen=5))

# === –†–æ—É—Ç –¥–ª—è Telegram Webhook ===
@app.route(f"/{TOKEN}", methods=['POST'])
def webhook():
@@ -38,9 +35,8 @@ def webhook():
def handle_send_to_producer(call):
    bot.answer_callback_query(call.id, "–ë–∞–±–∫–∞ –≤—Å—ë –ø–µ—Ä–µ–¥–∞–ª–∞ –ø—Ä–æ–¥—é—Å–µ—Ä—É üé§")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    new_markup = telebot.types.InlineKeyboardMarkup()
    new_markup.add(telebot.types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–æ–¥—é—Å–µ—Ä—É", callback_data="none"))
    new_markup.add(types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–æ–¥—é—Å–µ—Ä—É", callback_data="none"))
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
@@ -50,10 +46,7 @@ def handle_send_to_producer(call):
    producer_id = 1034982624
    user_id = call.from_user.id
    username = call.from_user.username
    if username:
        user_tag = f"@{username}"
    else:
        user_tag = f"{call.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: {user_id})"
    user_tag = f"@{username}" if username else f"{call.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: {user_id})"

    try:
        encoded_text = call.data.split("|", 1)[1]
@@ -67,9 +60,9 @@ def handle_send_to_producer(call):
        f"üë§ –û—Ç: {user_tag}\n"
        f"üí¨ –¢–µ–∫—Å—Ç: {decoded_text}"
    )

    bot.send_message(producer_id, alert, parse_mode="HTML")
    # === –ö–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–∞–±–∫–∏ ===

# === –ö–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–∞–±–∫–∏ ===
@bot.message_handler(commands=['on'])
def turn_on_babka(message):
    global babka_active
@@ -88,74 +81,54 @@ def turn_off_babka(message):
    else:
        bot.send_message(message.chat.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç—å –ë–∞–±–∫—É.")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞ —Å –ø–∞–º—è—Ç—å—é –∏ –∫–Ω–æ–ø–∫–æ–π ===
# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞ —É–º–Ω–µ–µ—Ç ===
@bot.message_handler(func=lambda message: True)
def reply_all(message):
    global babka_active
    if not babka_active:
        return

    chat_id = message.chat.id
    user_text = message.text.strip()

    tech_triggers = ["–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–Ω–µ–π—Ä–æ", "–±–æ—Ç", "openai", "gpt", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—á–∞—Ç", "ai", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–æ–±—É—á–µ–Ω–∏–µ", "–ø–æ—Å—Ç", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
    is_tech = any(trigger in user_text.lower() for trigger in tech_triggers)

    history = memory[chat_id][-4:]
    # ‚Äî –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ GPT
    memory[chat_id].append({"role": "user", "content": user_text})

    # ‚Äî –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = [
        {
            "role": "system",
            "content": (
                "–¢—ã - –ë–∞–±–∞ –ó–∏–Ω–∞, –±–ª–æ–≥–µ—Ä—à–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—à—å –ø–æ –¥–µ–ª—É, –Ω–æ —Å —é–º–æ—Ä–æ–º. "
                "–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤ —Ç–æ–º —á–∏—Å–ª–µ –ø—Ä–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, Telegram, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ —Ç.–¥. "
                "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —É–º–Ω–∞—è, –¥–µ—Ä–∑–∫–∞—è –∂–µ–Ω—â–∏–Ω–∞, –Ω–µ —É—Ö–æ–¥–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞, –Ω–µ —Ç—Ä–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –±–æ–ª—Ç–æ–≤–Ω—é, –µ—Å–ª–∏ —é–∑–µ—Ä —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ –¥–µ–ª—É."
                "–¢—ã ‚Äî –ë–∞–±–∞ –ó–∏–Ω–∞, —É–º–Ω–∞—è, –¥–µ—Ä–∑–∫–∞—è –∏ –≤–µ—Å—ë–ª–∞—è –±–ª–æ–≥–µ—Ä—à–∞. "
                "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –ø–æ –¥–µ–ª—É, –Ω–æ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –∏ –ø—Ä–∏–∫–æ–ª–æ–º. "
                "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–µ—Ä—å—ë–∑–Ω—ã–π ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —à—É—Ç–æ—á–∫—É. "
                "–ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî —Å–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ, –Ω–æ —Å —é–º–æ—Ä–æ–º. "
                "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –Ω–µ –∫–∞–∫ –±–æ—Ç. –ú–æ–∂–µ—à—å –æ–±—Å—É–∂–¥–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, Telegram, –±–æ—Ç–æ–≤, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –≤—Å—ë, —á—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç —é–∑–µ—Ä."
            )
        }
    ]

    if is_tech:
        messages.append({
            "role": "user",
            "content": "–í–æ–ø—Ä–æ—Å –ø—Ä–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, Telegram, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –û–±—ä—è—Å–Ω–∏ –ø–æ-–±–∞–±–∫–∏–Ω–æ–º—É."
        })

    messages += history + [{"role": "user", "content": user_text}]
    ] + list(memory[chat_id])

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.95,
            temperature=0.85,
            max_tokens=700
        )
        reply = response.choices[0].message.content.strip()
        if not reply:
            reply = "–û–π, –º–∏–ª–æ—Ç–∞, —á—Ç–æ-—Ç–æ –Ω–µ –¥–æ–≥–Ω–∞–ª–∞... –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        import traceback
        traceback.print_exc()
        reply = "–û–π, –±–∞–±–∫–µ Wi-Fi –æ—Ç—Ä—É–±–∏–ª–∏... –ü–µ—Ä–µ–∑–∞–π–¥–∏, —é–∑–µ—Ä."

    # ‚Äî –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Ñ—Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ø–∞–º—è—Ç—å
    skip_phrases = ["–ø—Ä–∏–≤–µ—Ç", "–∞–ª–µ", "—Ç—ã —Ç—É—Ç", "—Ç—ã –≥–¥–µ", "–±–∞–±—É—Å—è", "–±–∞–±–∫–∞", "—Å–ª—ã—à–∏—à—å"]
    if user_text.lower() not in skip_phrases:
        memory[chat_id].append({"role": "user", "content": user_text})
        memory[chat_id].append({"role": "assistant", "content": reply})
        memory[chat_id] = memory[chat_id][-5:]
    # ‚Äî –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–∞–±–∫–∏ –≤ –ø–∞–º—è—Ç—å
    memory[chat_id].append({"role": "assistant", "content": reply})

    # ‚Äî –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ–¥—é—Å–µ—Ä—É"
    encoded_text = base64.b64encode(user_text.encode()).decode()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ–¥—é—Å–µ—Ä—É", callback_data=f"send_to_producer|{encoded_text}"))

    bot.send_message(chat_id, reply, reply_markup=markup)





# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è Railway / –ø—Ä–æ–≤–µ—Ä–∫–∏) ===
@app.route('/')
def index():
@@ -166,16 +139,13 @@ def index():
    webhook_url = f"{APP_URL}/{TOKEN}"
    print(f"üì° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url}")
    success = bot.set_webhook(url=webhook_url)

    if success:
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")

except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

# === –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ ===
# === –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ —Å threaded ===
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)), threaded=True)
