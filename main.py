import os
import base64
import telebot
from telebot import types
import openai
from flask import Flask, request
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
APP_URL = os.getenv("APP_URL")
openai.api_key = os.getenv("OPENAI_API_KEY")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ===
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –†–æ—É—Ç –¥–ª—è Telegram Webhook ===
@app.route(f"/{TOKEN}", methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ–¥—é—Å–µ—Ä—É" ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("send_to_producer"))
def handle_send_to_producer(call):
    bot.answer_callback_query(call.id, "–ë–∞–±–∫–∞ –≤—Å—ë –ø–µ—Ä–µ–¥–∞–ª–∞ –ø—Ä–æ–¥—é—Å–µ—Ä—É üé§")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    new_markup = telebot.types.InlineKeyboardMarkup()
    new_markup.add(telebot.types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–æ–¥—é—Å–µ—Ä—É", callback_data="none"))
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=new_markup
    )

    producer_id = 1034982624
    user_id = call.from_user.id
username = call.from_user.username
if username:
    user_tag = f"@{username}"
else:
    user_tag = f"{call.from_user.first_name} (ID: {user_id})"


    try:
        if "|" in call.data:
            encoded_text = call.data.split("|", 1)[1]
            decoded_text = base64.b64decode(encoded_text.encode()).decode()
        else:
            decoded_text = call.message.text or "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        decoded_text = call.message.text or "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

    alert = (
    f"üé¨ –ë–∞–±–∫–∞ –ø–µ—Ä–µ–¥–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥—é—Å–µ—Ä—É!\n\n"
    f"üë§ –û—Ç: {user_tag}\n"
    f"üí¨ –¢–µ–∫—Å—Ç: {decoded_text}"
)


    bot.send_message(producer_id, alert, parse_mode="HTML")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞ —Ä—É–ª–∏—Ç ===
@bot.message_handler(func=lambda message: True)
def reply_all(message):
    user_text = message.text.strip()
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text} –æ—Ç {message.chat.id}")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –±–∞–±—É—à–∫–∞-–±–ª–æ–≥–µ—Ä. "
                        "–ì–æ–≤–æ—Ä–∏—à—å –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, —Å —é–º–æ—Ä–æ–º. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å ‚Äî —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏. "
                        "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –∫–∞–∫ –±–æ—Ç."
                    )
                },
                {"role": "user", "content": user_text}
            ],
            temperature=0.8,
            max_tokens=700
        )
        reply = response.choices[0].message.content.strip()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        reply = "–û–π, –±–∞–±–∫–µ Wi-Fi –æ—Ç—Ä—É–±–∏–ª–∏... –ü–µ—Ä–µ–∑–∞–π–¥–∏, —é–∑–µ—Ä."

    # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ–¥—é—Å–µ—Ä—É"
    encoded_text = base64.b64encode(user_text.encode()).decode()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ–¥—é—Å–µ—Ä—É", callback_data=f"send_to_producer|{encoded_text}"))

    bot.send_message(message.chat.id, reply, reply_markup=markup)

# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è Railway / –ø—Ä–æ–≤–µ—Ä–∫–∏) ===
@app.route('/')
def index():
    return '–ë–∞–±–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!'

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook ===
try:
    webhook_url = f"{APP_URL}/{TOKEN}"
    print(f"üì° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url}")
    success = bot.set_webhook(url=webhook_url)

    if success:
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")

except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

# === –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
