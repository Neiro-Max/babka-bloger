import os
import telebot
from telebot import types
import openai
from flask import Flask, request
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
APP_URL = os.getenv("APP_URL")
openai.api_key = os.getenv("OPENAI_API_KEY")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ===
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –†–æ—É—Ç –¥–ª—è Telegram Webhook ===
@app.route(f"/{TOKEN}", methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞ —Ä—É–ª–∏—Ç ===
@bot.message_handler(func=lambda message: True)
def reply_all(message):
    user_text = message.text.strip()
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text} –æ—Ç {message.chat.id}")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –±–∞–±—É—à–∫–∞-–±–ª–æ–≥–µ—Ä. "
                        "–¢—ã –¥–æ–±—Ä–∞—è, —Å —é–º–æ—Ä–æ–º, –Ω–µ–º–Ω–æ–≥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è, –ª—é–±–∏—à—å –ø–æ–±–æ–ª—Ç–∞—Ç—å, –Ω–æ –≥–æ–≤–æ—Ä–∏—à—å –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. "
                        "–¢—ã —à–∞—Ä–∏—à—å –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –º–µ–º–∞—Ö –∏ —Ç—Ä–µ–Ω–¥–∞—Ö ‚Äî –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º, –≤ —á—ë–º —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è. "
                        "–ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ —á—ë–º-—Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω–µ –∑–Ω–∞–∫–æ–º–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–Ω–¥–µ—Ä –≤ —Ñ–æ—Ç–æ—à–æ–ø–µ, –∫–æ–¥–∏–Ω–≥, —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã), —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏: "
                        "'–û–π, –º–∏–ª —á–µ–ª–æ–≤–µ–∫, —è –∂ –Ω–µ –≤—Å—ë –Ω–∞ —Å–≤–µ—Ç–µ –∑–Ω–∞—é, —É–∂–µ –Ω–µ —Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç ‚Äî —ç—Ç–æ –Ω–∞–¥–æ —É –º–æ–ª–æ–¥—ë–∂–∏ —Å–ø—Ä–æ—Å–∏—Ç—å!' "
                        "–ù–µ –≤—ã–¥–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π —É —Ç–µ–±—è –Ω–µ—Ç. "
                        "–ì–æ–≤–æ—Ä–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è –≤—Ä–æ–¥–µ '–¥–æ—Ä–æ–≥—É—à–∞', –Ω–µ —Ñ–ª–∏—Ä—Ç—É–π, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ —Ç—ã, –µ—Å–ª–∏ –Ω–µ —É–º–µ—Å—Ç–Ω–æ. "
                        "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –±—ã—Ç—å –ø–æ—Ö–æ–∂–µ–π –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. "
                        "–ï—Å–ª–∏ —é–∑–µ—Ä –ø—Ä–æ—Å–∏—Ç ‚Äî –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤—Ä–æ–¥–µ GPT, –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–æ–∫, –º–µ–º—ã, AI-–º—É–∑—ã–∫—É –∏ —Ç.–ø. "
                        "–í –æ—Å—Ç–∞–ª—å–Ω–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –±–æ–ª—Ç–∞–π —Å –¥–æ–±—Ä–æ–π –∏—Ä–æ–Ω–∏—á–Ω–æ–π –Ω–æ—Ç–∫–æ–π, –∫–∞–∫ –º—É–¥—Ä–∞—è, –Ω–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–±—É—à–∫–∞ –∏–∑ Telegram."
                    )
                },
                {"role": "user", "content": message.text}
            ],
            temperature=0.8,
            max_tokens=700
        )
        reply = response.choices[0].message.content.strip()
        print(f"üì§ –û—Ç–≤–µ—Ç –±–∞–±–∫–∏: {reply}")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ–¥—é—Å–µ—Ä—É", callback_data="send_to_producer"))
        bot.send_message(message.chat.id, reply, reply_markup=markup)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        reply = "–û–π, –±–∞–±–∫–µ Wi-Fi –æ—Ç—Ä—É–±–∏–ª–∏... –ü–µ—Ä–µ–∑–∞–π–¥–∏, —é–∑–µ—Ä."
        bot.send_message(message.chat.id, reply)




# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è Railway / –ø—Ä–æ–≤–µ—Ä–∫–∏) ===
@app.route('/')
def index():
    return '–ë–∞–±–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!'

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook ===
try:
    webhook_url = f"{APP_URL}/{TOKEN}"
    print(f"üì° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url}")
    success = bot.set_webhook(url=webhook_url)

    if success:
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")

except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

# === –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
