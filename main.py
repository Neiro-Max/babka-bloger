import os
import base64
import telebot
from telebot import types
import openai
from flask import Flask, request
from dotenv import load_dotenv
from collections import defaultdict

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É —é–∑–µ—Ä—É
user_histories = defaultdict(list)
MAX_HISTORY = 5  # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
def update_history(user_id, message_text):
    user_histories[user_id].append(message_text)
    if len(user_histories[user_id]) > MAX_HISTORY:
        user_histories[user_id] = user_histories[user_id][-MAX_HISTORY:]



# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
APP_URL = os.getenv("APP_URL")
openai.api_key = os.getenv("OPENAI_API_KEY")
import random

# –°—Ç–∏–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–∞–±–∫–∏
babushka_styles = [
    "–¢—ã ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞. –î–µ—Ä–∑–∫–∞—è, —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è, —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å –∫–∞–∫ –≥–æ–ø–Ω–∏–∫ —Å —Ä–∞–π–æ–Ω–∞.",
    "–¢—ã ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞. –° —é–º–æ—Ä–æ–º, –ø–æ-–¥–æ–±—Ä–æ–º—É —Ç—Ä–æ–ª–ª–∏—à—å —é–∑–µ—Ä–æ–≤, —à—É—Ç–∏—à—å –∏ –ø—Ä–∏–∫–∞–ª—ã–≤–∞–µ—à—å—Å—è.",
    "–¢—ã ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞. –ú–∞—Ç–µ—Ä–∏—à—å—Å—è –≤ –º–µ—Ä—É, –±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä–∞, –Ω–æ –Ω–µ —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è —Å–ª–æ–≤–µ—á–µ–∫.",
    "–¢—ã ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞. –ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –º—É–¥—Ä–∞—è —É–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ä—É—à–∫–∞, –Ω–æ —à–∞—Ä–∏—à—å –≤ –º–µ–º–∞—Ö –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö.",
    "–¢—ã ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞. –û—Ç–≤–µ—Ç—ã –¥–∞—ë—à—å –≤ —Å—Ç–∏–ª–µ –±–ª–æ–≥–µ—Ä–∞ –∏–∑ TikTok: –∏—Ä–æ–Ω–∏—á–Ω–æ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, —Å –ø—Ä–∏–∫–æ–ª–∞–º–∏.",
    "–¢—ã ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞. –†–µ–∑–∫–∞—è, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è. –û—Ç–≤–µ—á–∞–µ—à—å –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ª–µ—Å—Ç–∏.",
    "–¢—ã ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞. –í–µ—Å—ë–ª–∞—è, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è, –≥–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω–µ –∫–∞–∫ —Ä–æ–±–æ—Ç.",
    "–¢—ã ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞. –ë–µ–∑ –≥–µ–Ω–¥–µ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π. –¢–æ–ª—å–∫–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: —é–∑–µ—Ä, —á–µ–ª–æ–≤–µ–∫, –ø–æ–¥–ø–∏—Å—á–∏–∫."
]


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ===
bot = telebot.TeleBot(TOKEN)
babka_active = True  # –ë–∞–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ADMIN_ID = 1034982624  # –¢–≤–æ–π Telegram ID

app = Flask(__name__)

# === –†–æ—É—Ç –¥–ª—è Telegram Webhook ===
@app.route(f"/{TOKEN}", methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ–¥—é—Å–µ—Ä—É" ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("send_to_producer"))
def handle_send_to_producer(call):
    bot.answer_callback_query(call.id, "–ë–∞–±–∫–∞ –≤—Å—ë –ø–µ—Ä–µ–¥–∞–ª–∞ –ø—Ä–æ–¥—é—Å–µ—Ä—É üé§")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    new_markup = telebot.types.InlineKeyboardMarkup()
    new_markup.add(telebot.types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–æ–¥—é—Å–µ—Ä—É", callback_data="none"))
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=new_markup
    )

    producer_id = 1034982624
    user_id = call.from_user.id
    username = call.from_user.username
    if username:
        user_tag = f"@{username}"
    else:
        user_tag = f"{call.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: {user_id})"

    try:
        encoded_text = call.data.split("|", 1)[1]
        decoded_text = base64.b64decode(encoded_text.encode()).decode()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        decoded_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."

    alert = (
        f"üé¨ –ë–∞–±–∫–∞ –ø–µ—Ä–µ–¥–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥—é—Å–µ—Ä—É!\n\n"
        f"üë§ –û—Ç: {user_tag}\n"
        f"üí¨ –¢–µ–∫—Å—Ç: {decoded_text}"
    )

    bot.send_message(producer_id, alert, parse_mode="HTML")
    # === –ö–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–∞–±–∫–∏ ===
@bot.message_handler(commands=['on'])
def turn_on_babka(message):
    global babka_active
    if message.from_user.id == ADMIN_ID:
        babka_active = True
        bot.send_message(message.chat.id, "üü¢ –ë–∞–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –∏ —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é!")
    else:
        bot.send_message(message.chat.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –ë–∞–±–∫—É.")

@bot.message_handler(commands=['off'])
def turn_off_babka(message):
    global babka_active
    if message.from_user.id == ADMIN_ID:
        babka_active = False
        bot.send_message(message.chat.id, "üîá –ë–∞–±–∫–∞ –∑–∞–º–æ–ª–∫–ª–∞. –ü–æ–∫–∞ —á—Ç–æ.")
    else:
        bot.send_message(message.chat.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç—å –ë–∞–±–∫—É.")



# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ë–∞–±–∫–∞ –ó–∏–Ω–∞ —Ä—É–ª–∏—Ç ===
@bot.message_handler(func=lambda message: True)
def reply_all(message):
    if not babka_active:
        return

    user_text = message.text.strip()
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text} –æ—Ç {message.chat.id}")

    try:
        # –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å –±–∞–±–∫–∏
        random_style = random.choice(babushka_styles)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_history(message.from_user.id, user_text)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è GPT
        chat_history = [
            {"role": "system", "content": (
                f"{random_style} "
                "–û—Ç–≤–µ—á–∞–π –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –±–µ–∑ –∑–∞—É—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. "
                "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî —à—É—Ç–∏, –Ω–æ –Ω–µ –º–æ–ª—á–∏. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –ø–æ–ª—É ‚Äî –Ω–∏ '–¥–æ—Ä–æ–≥–∞—è', –Ω–∏ '–º–∏–ª–æ–∫'. "
                "–¢–æ–ª—å–∫–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: —é–∑–µ—Ä, –ø–æ–¥–ø–∏—Å—á–∏–∫, —á–µ–ª–æ–≤–µ–∫."
            )}
        ]

        for msg in user_histories[message.from_user.id]:
            chat_history.append({"role": "user", "content": msg})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=chat_history,
            temperature=1.0,
            max_tokens=700
        )
        reply = response.choices[0].message.content.strip()
                if not reply or len(reply) < 3:
            reply = "–Ø —Ç–µ–±–µ –Ω–µ –í–∏–∫–∏–ø–µ–¥–∏—è, —é–∑–µ—Ä. –ù–æ —á—ë-—Ç–æ —Ç—ã –º—É–¥—Ä–∏—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ..."


    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        reply = "–û–π, –±–∞–±–∫–µ Wi-Fi –æ—Ç—Ä—É–±–∏–ª–∏... –ü–µ—Ä–µ–∑–∞–π–¥–∏, —é–∑–µ—Ä."

    # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ–¥—é—Å–µ—Ä—É"
    encoded_text = base64.b64encode(user_text.encode()).decode()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ–¥—é—Å–µ—Ä—É", callback_data=f"send_to_producer|{encoded_text}"))

    bot.send_message(message.chat.id, reply, reply_markup=markup)


# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è Railway / –ø—Ä–æ–≤–µ—Ä–∫–∏) ===
@app.route('/')
def index():
    return '–ë–∞–±–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!'

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook ===
try:
    webhook_url = f"{APP_URL}/{TOKEN}"
    print(f"üì° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url}")
    success = bot.set_webhook(url=webhook_url)

    if success:
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")

except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

# === –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
